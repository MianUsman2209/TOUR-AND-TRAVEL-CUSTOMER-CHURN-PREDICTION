# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mOJTAejWmlmrHPycDtfH9ll50IzstM3n
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

data = pd.read_csv('/content/Customertravel[1].csv')

data.isnull().sum()

data.info()

data.duplicated().sum()

data.shape

data.info()

data.describe()

data.columns

import matplotlib.pyplot as plt
import plotly.express as px

fig = px.histogram(data,x='AnnualIncomeClass',color='Target')
fig.show()

fig = px.histogram(data,x='AnnualIncomeClass',color='FrequentFlyer')
fig.show()

data['ServicesOpted'].value_counts()

fig = px.histogram(data,x='AnnualIncomeClass',color='ServicesOpted')
fig.show()

fig = px.histogram(data,x='AnnualIncomeClass',color='BookedHotelOrNot')
fig.show()

from sklearn.preprocessing import LabelEncoder

from sklearn.preprocessing import LabelEncoder

cat_col = data.select_dtypes(include=['object']).columns
le = LabelEncoder() # create an instance of LabelEncoder and assign it to the variable le
for i in cat_col:
    data[i] = le.fit_transform(data[i])

data.info()

from sklearn.model_selection import train_test_split

X = data.drop(columns=['Target'])
y = data['Target']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=1)



X_train

from sklearn.preprocessing import StandardScaler

from sklearn.preprocessing import StandardScaler

# Create a StandardScaler instance
scaler = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.fit_transform(X_test)

X_train_scaled

from sklearn.linear_model import LogisticRegression

lr = LogisticRegression()

lr.fit(X_train_scaled,y_train)

y_pred = lr.predict(X_test_scaled)

from sklearn.metrics import accuracy_score

accuracy_score(y_test,y_pred)



